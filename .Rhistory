}
W = 200.0                    # channel width (m)
D = 16.0                     # channel depth (m)
pad = 100                    # padding (number of nodepoints along centerline)
deltas = 50.0                # sampling distance along centerline
n_bends = 30                 # approximate number of bends you want to model
Sl = 0                    # initial slope (setting this to non-zero results in instabilities in long runs)
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
generate_initial_channel <- function(W,
D,
Sl,
deltas,
pad,
n_bends) {
# length of noisy part of initial centerline
noisy_len = n_bends*10*W/2.0
# padding at upstream end can be shorter than padding on downstream end
pad1 = as.integer(pad/10.0)
if(pad1<5L) pad1 = 5
# x coordinate
x = seq(0, noisy_len+(pad+pad1)*deltas, length.out = as.integer(noisy_len/deltas+pad+pad1)+1)
# y coordinate
y = 10L * (2L * runif(as.integer(noisy_len/deltas) +1) - 1)
y = c(rep(0, pad1), y, rep(0, pad))
# z coordinate
deltaz = Sl * deltas*(length(x)-1)
z = rev(seq(0, deltaz, length.out = length(x)))
# return Channel object
return(Channel$new(x,y,z,W,D))
}
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
#' class for Channel objects
#' @importFrom R6 R6Class
Channel <- R6::R6Class("Channel",
public = list(
x = NULL, # x-coordinate of centerline
y = NULL, # y-coordinate of centerline
z = NULL, # z-coordinate of centerline
W = NULL, # channel width
D = NULL, # channel depth,
initialize = function(x = NA,
y = NA,
z = NA,
W = NA,
D = NA) {
self$x <- x
self$y <- y
self$z <- z
self$W <- W
self$D <- D
self$report()
},
report = function() {
cli_alert_info(c(
bgX("X coordinate(s) of centerline: ", crayon::underline$bold(min(self$x)), " ... ", crayon::underline$bold(max(self$x)))))
cli_alert_info(c(
bgY("Y coordinate(s) of centerline: ", crayon::underline$bold(min(self$y)), " ... ", crayon::underline$bold(max(self$y)))))
cli_alert_info(c(
bgZ("Z coordinate(s) of centerline: ", crayon::underline$bold(min(self$z)), " ... ", crayon::underline$bold(max(self$z)))))
cli_alert_info(c(
bgW("Channel width: ", crayon::underline$bold(self$W))))
cli_alert_info(c(
bgD("Channel depth: ", crayon::underline$bold(self$D))))
}
)
)
generate_initial_channel <- function(W,
D,
Sl,
deltas,
pad,
n_bends) {
# length of noisy part of initial centerline
noisy_len = n_bends*10*W/2.0
# padding at upstream end can be shorter than padding on downstream end
pad1 = as.integer(pad/10.0)
if(pad1<5L) pad1 = 5
# x coordinate
x = seq(0, noisy_len+(pad+pad1)*deltas, length.out = as.integer(noisy_len/deltas+pad+pad1)+1)
# y coordinate
y = 10L * (2L * runif(as.integer(noisy_len/deltas) +1) - 1)
y = c(rep(0, pad1), y, rep(0, pad))
# z coordinate
deltaz = Sl * deltas*(length(x)-1)
z = rev(seq(0, deltaz, length.out = length(x)))
# return Channel object
return(Channel$new(x,y,z,W,D))
}
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
devtools::load_all(".")
devtools::load_all(".")
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
library(crayon)
library(cli)
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
channel
channel$x
compute_derivatives(channel$x, channel$y, channel$z)
library(pracma)
compute_derivatives(channel$x, channel$y, channel$z)
compute_derivatives <- function(x,y,z){
dx = gradient(x) # first derivatives
dy = gradient(y)
dz = gradient(z)
ds = sqrt(dx^2+dy^2+dz^2)
s  = c(0, cumsum(ds[-1]))
return(list(dx, dy, dz, ds, s))
}
compute_derivatives(channel$x, channel$y, channel$z)
x
x = channel$x
y = channel$y
z = channel$z
ns = length(x)
ns = length(x)
ns
curv =  list(x,y)
derivatives_dx_dy_dz_ds_s = compute_derivatives(x,y,z)
sinuosity = derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]/(x[length(x)]-x[1])
sinuosity
derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]
derivatives_dx_dy_dz_ds_s
derivatives_dx_dy_dz_ds_s$s
compute_derivatives <- function(x,y,z){
dx = gradient(x) # first derivatives
dy = gradient(y)
dz = gradient(z)
ds = sqrt(dx^2+dy^2+dz^2)
s  = c(0, cumsum(ds[-1]))
return(list("dx" = dx, "dy" = dy, "dz" = dz, "ds" = ds, "s" = s))
}
derivatives_dx_dy_dz_ds_s = compute_derivatives(x,y,z)
derivatives_dx_dy_dz_ds_s
derivatives_dx_dy_dz_ds_s$s
derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]
derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]/(x[length(x)]-x[1])
x
x[length(x)]
x[1]
sinuosity = derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]/(x[length(x)]-x[1])
curv = W*curv # dimensionless curvature
W
W = 200
curv
devtools::load_all(".")
devtools::load_all(".")
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
W = 200.0                    # channel width (m)
D = 16.0                     # channel depth (m)
pad = 100                    # padding (number of nodepoints along centerline)
deltas = 50.0                # sampling distance along centerline
n_bends = 30                 # approximate number of bends you want to model
Sl = 0                    # initial slope (setting this to non-zero results in instabilities in long runs)
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
library(cli)
channel <- generate_initial_channel(W,D,Sl,deltas,pad,n_bends)
x = channel$x
y = channel$y
z = channel$z
ns = length(x)
R1 = vector(length = ns) # preallocate adjusted channel migration rate
pad1 = int(pad/10.0) # padding at upstream end can be shorter than padding on downstream end
pad1 = as.integer(pad/10.0) # padding at upstream end can be shorter than padding on downstream end
seq(pad1,ns-pad)
pad
i = 10
ns = length(x)
curv =  mapply(c, x, y, SIMPLIFY=FALSE)
curv =  rbind(x, y)
derivatives_dx_dy_dz_ds_s = compute_derivatives(x,y,z)
library(pracma)
derivatives_dx_dy_dz_ds_s = compute_derivatives(x,y,z)
sinuosity = derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]/(x[length(x)]-x[1])
curv = W*curv # dimensionless curvature
R0 = kl*curv # simple linear relationship between curvature and nominal migration rate
alpha = k*2*Cf/D # exponent for convolution function G
kl = 60.0/(365*24*60*60.0)
R0 = kl*curv # simple linear relationship between curvature and nominal migration rate
alpha = k*2*Cf/D # exponent for convolution function G
k = 1.0
alpha = k*2*Cf/D # exponent for convolution function G
Cf = 0.03
Cf = 0.03
ds = derivatives_dx_dy_dz_ds_s$ds
i
ds[i:1]
ds[1:i]
#si2 = np.hstack((np.array([0]),np.cumsum(ds[i-1::-1])))  # distance along centerline, backwards from current point
si2 = c(0, cumsum(ds[i:1]))
alpha = k*2*Cf/D # exponent for convolution function G
G = exp(-alpha*si2) # convolution vector
G
omega = -1.0
gamma = 2.5
R1[i] = omega*R0[i] + gamma*sum(R0[i:1]*G)/sum(G) # main equation
sum(G)
omega*R0[i]
omega
R0
R0[i]
gamma
sum(R0[i:1]*G)
R0[i:1]
R0[i:1]*G
R1[i]
for (i in seq(pad1,ns-pad)){
#si2 = np.hstack((np.array([0]),np.cumsum(ds[i-1::-1])))  # distance along centerline, backwards from current point
si2 = c(0, cumsum(ds[i:1]))
G = exp(-alpha*si2) # convolution vector
R1[i] = omega*R0[i] + gamma*sum(R0[i:1]*G)/ sum(G) # main equation
}
for (i in seq(pad1,ns-pad)){
#si2 = np.hstack((np.array([0]),np.cumsum(ds[i-1::-1])))  # distance along centerline, backwards from current point
si2 = c(0, cumsum(ds[i:1]))
G = exp(-alpha*si2) # convolution vector
suppressWarnings(
R1[i] = omega*R0[i] + gamma*sum(R0[i:1]*G)/ sum(G) # main equation
for (i in seq(pad1,ns-pad)){
#si2 = np.hstack((np.array([0]),np.cumsum(ds[i-1::-1])))  # distance along centerline, backwards from current point
si2 = c(0, cumsum(ds[i:1]))
G = exp(-alpha*si2) # convolution vector
R1[i] = omega*R0[i] + gamma*suppressWarnings(sum(R0[i:1]*G))/ sum(G) # main equation
}
R1
R1[i] = omega*R0[i] + gamma*suppressWarnings(sum(R0[i:1]*G))/ sum(G) # main equation
R1[i]
alpha
gamma
omega
alpha = 0.00375
gamma = 2.5
omega = -1
kl
curv
kl
kl = 60.0/(365*24*60*60.0)
R0 = kl*curv
curv =  mapply(c, x, y, SIMPLIFY=FALSE)
curv =  rbind(x, y)
curv = W*curv # dimensionless curvature
R0 = kl*curv
compute_migration_rate <- function(pad,ns,ds,alpha,omega,gamma,R0){
R1 = vector(length = ns) # preallocate adjusted channel migration rate
pad1 = as.integer(pad/10.0) # padding at upstream end can be shorter than padding on downstream end
if (pad1<5) pad1 = 5
for (i in seq(pad1,ns-pad)){
#si2 = np.hstack((np.array([0]),np.cumsum(ds[i-1::-1])))  # distance along centerline, backwards from current point
si2 = c(0, cumsum(ds[i:1]))
G = exp(-alpha*si2) # convolution vector
R1[i] = omega*R0[i] + gamma*suppressWarnings(sum(R0[i:1]*G))/ sum(G) # main equation
}
return(R1)
}
compute_migration_rate(pad,ns,ds,alpha,omega,gamma,R0)
compute_migration_rate <- function(pad,ns,ds,alpha,omega,gamma,R0){
R1 = vector(length = ns) # preallocate adjusted channel migration rate
pad1 = as.integer(pad/10.0) # padding at upstream end can be shorter than padding on downstream end
if (pad1<5) pad1 = 5
for (i in seq(pad1,ns-pad)){
#si2 = np.hstack((np.array([0]),np.cumsum(ds[i-1::-1])))  # distance along centerline, backwards from current point
si2 = c(0, cumsum(ds[i:1]))
G = exp(-alpha*si2) # convolution vector
R1[i] = omega*R0[i] + gamma*suppressWarnings(sum(R0[i:1]*G))/ sum(G) # main equation
}
return(R1)
}
R1 = compute_migration_rate(pad,ns,ds,alpha,omega,gamma,R0)
R1 = sinuosity**(-2/3.0)*R1
dx = derivatives_dx_dy_dz_ds_s$dx
dy = derivatives_dx_dy_dz_ds_s$dy
dz = derivatives_dx_dy_dz_ds_s$dz
ds = derivatives_dx_dy_dz_ds_s$ds
s  = derivatives_dx_dy_dz_ds_s$s
sinuosity = derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]/(x[length(x)]-x[1])
curv = W*curv # dimensionless curvature
R0 = kl*curv # simple linear relationship between curvature and nominal migration rate
alpha = k*2*Cf/D # exponent for convolution function G
R1 = compute_migration_rate(pad,ns,ds,alpha,omega,gamma,R0)
R1 = sinuosity**(-2/3.0)*R1
pad1
ns-pad+1
(pad1 +1)
ns-pad
dy[(pad1 +1):(ns-pad)]/ds[(pad1 +1):(ns-pad)]
pad1
ns-pad
# calculate new centerline coordinates:
dy_ds = dy[(pad1 +1):(ns-pad)]/ds[(pad1 +1):(ns-pad)]
dx_ds = dx[(pad1 +1):(ns-pad)]/ds[(pad1 +1):(ns-pad)]
x[(pad1 +1):(ns-pad)] = x[(pad1 +1):(ns-pad)] + R1[(pad1 +1):(ns-pad)]*dy_ds*dt
dy_ds
dt
dt = 0.1*(365*24*60*60.0)
# adjust x and y coordinates (this *is* the migration):
x[(pad1 +1):(ns-pad)] = x[(pad1 +1):(ns-pad)] + R1[(pad1 +1):(ns-pad)]*dy_ds*dt
y[(pad1 +1):(ns-pad)] = y[(pad1 +1):(ns-pad)] - R1[(pad1 +1):(ns-pad)]*dx_ds*dt
migrate_one_step <- function(x,y,z,W,kl,dt,k,Cf,D,pad,pad1,omega,gamma){
ns = length(x)
curv =  mapply(c, x, y, SIMPLIFY=FALSE)
curv =  rbind(x, y)
derivatives_dx_dy_dz_ds_s = compute_derivatives(x,y,z)
dx = derivatives_dx_dy_dz_ds_s$dx
dy = derivatives_dx_dy_dz_ds_s$dy
dz = derivatives_dx_dy_dz_ds_s$dz
ds = derivatives_dx_dy_dz_ds_s$ds
s  = derivatives_dx_dy_dz_ds_s$s
sinuosity = derivatives_dx_dy_dz_ds_s$s[length(derivatives_dx_dy_dz_ds_s$s)]/(x[length(x)]-x[1])
curv = W*curv # dimensionless curvature
R0 = kl*curv # simple linear relationship between curvature and nominal migration rate
alpha = k*2*Cf/D # exponent for convolution function G
R1 = compute_migration_rate(pad,ns,ds,alpha,omega,gamma,R0)
R1 = sinuosity**(-2/3.0)*R1
# calculate new centerline coordinates:
dy_ds = dy[(pad1 +1):(ns-pad)]/ds[(pad1 +1):(ns-pad)]
dx_ds = dx[(pad1 +1):(ns-pad)]/ds[(pad1 +1):(ns-pad)]
# adjust x and y coordinates (this *is* the migration):
x[(pad1 +1):(ns-pad)] = x[(pad1 +1):(ns-pad)] + R1[(pad1 +1):(ns-pad)]*dy_ds*dt
y[(pad1 +1):(ns-pad)] = y[(pad1 +1):(ns-pad)] - R1[(pad1 +1):(ns-pad)]*dx_ds*dt
return(list(x,y))
}
migrate_one_step(x,y,z,W,kl,dt,k,Cf,D,pad,pad1,omega,gamma)
migrate_one_step(x,y,z,W,kl,dt,k,Cf,D,pad,pad1,omega,gamma)
x = channel.x
y = channel.y
x = channel$x
x = channel$x
y = channel$y
z = channel$z
W = channel$W
D = channel$D
k = 1.0 # constant in HK equation
xc = c() # initialize cutoff coordinates
# determine age of last channel:
if (len(self.cl_times)>0){
last_cl_time = self.cl_times[-1]
} else {
last_cl_time = 0
}
self
channels
cutoffs
cl_times
cutoff_times
x_y = migrate_one_step(x,y,z,W,kl,dt,k,Cf,D,pad,pad1,omega,gamma)
Cf = Cfs[itn]
slope = gradient(z)/ds
crdist
crdist = W
diag_blank_width = int((crdist+20*deltas)/deltas)
diag_blank_width = as.integer((crdist+20*deltas)/deltas)
diag_blank_width
(crdist+20*deltas)/deltas
diag_blank_width = as.integer((crdist+20*deltas)/deltas)
diag_blank_width
disinstall.packages("rdist")
install.packages("rdist")
usethis::use_package("rdist")
matrix(x,y)
matrix(x,y, ncol=2)
cbind(x,y)
t(cbind(x,y))
rdist::cdist(t(cbind(x,y)), t(cbind(x,y)))
x
reticulate::repl_python()
y
reticulate::repl_python()
rdist::dist(t(cbind(x,y)), t(cbind(x,y)))
rdist::pdist(t(cbind(x,y)), t(cbind(x,y)))
rdist::pdist(t(cbind(x,y)))
t(cbind(x,y))
cbind(x,y)
rdist::pdist(cbind(x,y))
# distance matrix for centerline points:
dist = rdist::pdist(cbind(x,y))
crdist
dist[dist>crdist] = NA
a = dist
diag(a)
diag_blank_width
k = -24
mat[col(a) - row(a) == k]
a[col(a) - row(a) == k]
cbind(x,y)
source("~/Documents/meander/R/find_cutoffs.R", echo=TRUE)
reticulate::repl_python()
# distance matrix for centerline points:
dist = rdist::pdist(cbind(x,y).T)
# distance matrix for centerline points:
dist = rdist::pdist(t(cbind(x,y)))
View(dist)
t(cbind(x,y))
# distance matrix for centerline points:
dist =t(cbind(x,y))
dist
View(dist)
reticulate::repl_python()
# distance matrix for centerline points:
dist = t(cbind(x,y))
dist
rdist::cdist(dist, dist)
# distance matrix for centerline points:
dist = (cbind(x,y))
rdist::cdist(dist, dist)
dist = rdist::cdist(dist, dist)
View(dist)
dist[dist>crdist] = NA # set all values that are larger than the cutoff threshold to Na
a = dist
diag(a)
k = -24
a[col(a) - row(a) == k]
k = 24
a[col(a) - row(a) == k]
col(a
)
col(a) - row(a)
col(a) - row(a) == k
k
a[col(a) - row(a) == 1]
a[col(a) - row(a) == 2]
a[col(a) - row(a) == 5]
a[col(a) - row(a) == 4]
a[col(a) - row(a) == 300]
a[col(a) - row(a) == 200]
a[col(a) - row(a) == 100]
a[col(a) - row(a) == 500]
reticulate::repl_python()
row(similMatrix)
row(a)
col(a)
col(a) - row(a) == 500
col(a) - row(a) == 1
diag(a, names = FALSE))
diag(a, names = FALSE)
diag(a, names = TRUE)
rownames(a)
rownames(a) <- 1:nrow(a)
colnames(a) <- 1:ncol(a)
diag(a, names = TRUE)
diag(a, names = TRUE, value = 0)
diag.ind <-
function (x, n=1, diag = TRUE) {
x <- as.matrix(x)
if (diag) {
!(row(x) > col(x)) + (row(x) <= col(x)-n)
} else { !(row(x) >= col(x)) + (row(x) <= col(x)-n) }
}
diag.ind(a)
diag.ind <-
function (x, n=1, diag = FALSE) {
x <- as.matrix(x)
if (diag) {
!(row(x) > col(x)) + (row(x) <= col(x)-n)
} else { !(row(x) >= col(x)) + (row(x) <= col(x)-n) }
}
diag.ind(a)
row(x) > col(x)
reticulate::repl_python()
rows <- seq_len(nrow(a))
cols <- seq_len(ncol(a))
dist
reticulate::repl_python()
row_n = nrow(a)
col_n = ncol(a)
row_n = nrow(a)
col_n = ncol(a)
rows = seq_len(row_n)
cols = seq_len(col_n)
row_n
col_n
1:row_n + k
row_n
k
k = -2
1:row_n + k
1:(row_n + k)
(-1 * k):col_n
(-1 * k) + 1:col_n
((-1 * k) + 1):col_n
rows = rows[1:(row_n + k)]
cols = cols[((-1 * k) + 1):col_n]
(k +1):row_n
((-1*k) +1):row_n)
((-1*k)+1)
((-1*k)+1):row_n
rows = rows[((-1*k)+1):row_n]
((-1 * k) + 1):col_n
1:((-1 * k) + ncol)
(-1 * k)
k = 2
((-1 * k) + ncol)
-1 * k
(-1 * k) + ncol
(-1 * k) + col_n
1:((-1 * k) + col_n)
((k)+1):row_n
1:((-1 * k) + col_n)
kth_diag_indices <- function(a,k){
row_n = nrow(a)
col_n = ncol(a)
if(k<0){
rows = 1:(row_n + k)
cols = ((-1 * k) + 1):col_n
}
if(k>0){
rows = (k+1):row_n
cols = 1:((-1 * k) + col_n)
}
return(list("rows" = rows, "cols" = cols))
}
rows_cols = kth_diag_indices(dist,k)
rows_cols
reticulate::repl_python()
